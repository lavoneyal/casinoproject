/*
Deployment script for casino2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "casino2"
:setvar DefaultFilePrefix "casino2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[ACTIONS]...';


GO
CREATE TABLE [dbo].[ACTIONS] (
    [ActionID] INT           NOT NULL,
    [Action]   VARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([ActionID] ASC)
);


GO
PRINT N'Creating Table [dbo].[COUNTRIES]...';


GO
CREATE TABLE [dbo].[COUNTRIES] (
    [COUNTRYID]   INT           NOT NULL,
    [COUNTRYNAME] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([COUNTRYID] ASC)
);


GO
PRINT N'Creating Table [dbo].[GAMES]...';


GO
CREATE TABLE [dbo].[GAMES] (
    [GameID]   INT           NOT NULL,
    [GameName] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([GameID] ASC)
);


GO
PRINT N'Creating Table [dbo].[GENDER]...';


GO
CREATE TABLE [dbo].[GENDER] (
    [GENDERID] BIT           NOT NULL,
    [GENDER]   VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([GENDERID] ASC)
);


GO
PRINT N'Creating Table [dbo].[passwordhistory]...';


GO
CREATE TABLE [dbo].[passwordhistory] (
    [playerid]  INT            NOT NULL,
    [Password]  NVARCHAR (100) NOT NULL,
    [ValidFrom] DATETIME2 (2)  NULL,
    [ValidTo]   DATETIME2 (2)  NULL
);


GO
PRINT N'Creating Table [dbo].[PLAYER]...';


GO
CREATE TABLE [dbo].[PLAYER] (
    [playerID]  INT            IDENTITY (1111, 100) NOT NULL,
    [username]  VARCHAR (10)   NOT NULL,
    [password]  VARCHAR (10)   NOT NULL,
    [FirstName] NVARCHAR (20)  NOT NULL,
    [Lastname]  NVARCHAR (20)  NOT NULL,
    [Address]   NVARCHAR (100) NULL,
    [CountryID] INT            NOT NULL,
    [Email]     NVARCHAR (100) NOT NULL,
    [GenderID]  BIT            NULL,
    [BirthDate] DATETIME       NOT NULL,
    [isblock]   BIT            NULL,
    [NUmFailed] INT            NULL,
    PRIMARY KEY CLUSTERED ([playerID] ASC),
    UNIQUE NONCLUSTERED ([username] ASC)
);


GO
PRINT N'Creating Table [dbo].[playerdata]...';


GO
CREATE TABLE [dbo].[playerdata] (
    [usernaMe]  NVARCHAR (255) NULL,
    [password]  NVARCHAR (255) NULL,
    [FirstNaMe] NVARCHAR (255) NULL,
    [LastnaMe]  NVARCHAR (255) NULL,
    [Address]   NVARCHAR (255) NULL,
    [CountryID] FLOAT (53)     NULL,
    [EMail]     NVARCHAR (255) NULL,
    [GenderID]  FLOAT (53)     NULL,
    [BirthDate] DATETIME       NULL,
    [Balance]   FLOAT (53)     NULL
);


GO
PRINT N'Creating Table [dbo].[ROUNDS]...';


GO
CREATE TABLE [dbo].[ROUNDS] (
    [RoundID]  INT      IDENTITY (100, 1) NOT NULL,
    [GameID]   INT      NOT NULL,
    [PlayerID] INT      NOT NULL,
    [Date]     DATETIME NOT NULL,
    [Bet]      INT      NULL,
    [Win]      INT      NULL,
    PRIMARY KEY CLUSTERED ([RoundID] ASC)
);


GO
PRINT N'Creating Table [dbo].[slotCombo]...';


GO
CREATE TABLE [dbo].[slotCombo] (
    [slotID] INT          NOT NULL,
    [reel1]  VARCHAR (20) NOT NULL,
    [reel2]  VARCHAR (20) NOT NULL,
    [reel3]  VARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([slotID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Symbols]...';


GO
CREATE TABLE [dbo].[Symbols] (
    [Number] INT          NULL,
    [Symbol] VARCHAR (10) NULL
);


GO
PRINT N'Creating Table [dbo].[TRANSACTIONS]...';


GO
CREATE TABLE [dbo].[TRANSACTIONS] (
    [TransID]  INT      IDENTITY (100, 10) NOT NULL,
    [PlayerID] INT      NOT NULL,
    [Date]     DATETIME NOT NULL,
    [Amount]   INT      NULL,
    [ActionID] INT      NOT NULL
);


GO
PRINT N'Creating Table [dbo].[userlogin]...';


GO
CREATE TABLE [dbo].[userlogin] (
    [playerid] INT           NULL,
    [UserName] NVARCHAR (50) NOT NULL,
    [LoggedIn] INT           NULL,
    [time]     DATETIME      NULL
);


GO
PRINT N'Creating Table [dbo].[wallet]...';


GO
CREATE TABLE [dbo].[wallet] (
    [playerid] INT      NOT NULL,
    [deposit]  INT      NOT NULL,
    [withdraw] INT      NOT NULL,
    [bet]      INT      NOT NULL,
    [win]      INT      NOT NULL,
    [date]     DATETIME NULL,
    [balance]  AS       (([deposit] - [withdraw]) + ([win] - [bet]))
);


GO
PRINT N'Creating Table [dbo].[WeakPasses]...';


GO
CREATE TABLE [dbo].[WeakPasses] (
    [Password] FLOAT (53) NULL
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[PLAYER]...';


GO
ALTER TABLE [dbo].[PLAYER]
    ADD DEFAULT ((0)) FOR [isblock];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[PLAYER]...';


GO
ALTER TABLE [dbo].[PLAYER]
    ADD DEFAULT ((0)) FOR [NUmFailed];


GO
PRINT N'Creating Foreign Key [dbo].[FK_PLAYER_COUNTRY]...';


GO
ALTER TABLE [dbo].[PLAYER]
    ADD CONSTRAINT [FK_PLAYER_COUNTRY] FOREIGN KEY ([CountryID]) REFERENCES [dbo].[COUNTRIES] ([COUNTRYID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_PLAYER_Genders]...';


GO
ALTER TABLE [dbo].[PLAYER]
    ADD CONSTRAINT [FK_PLAYER_Genders] FOREIGN KEY ([GenderID]) REFERENCES [dbo].[GENDER] ([GENDERID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_rounds_games]...';


GO
ALTER TABLE [dbo].[ROUNDS]
    ADD CONSTRAINT [FK_rounds_games] FOREIGN KEY ([GameID]) REFERENCES [dbo].[GAMES] ([GameID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_rounds_player]...';


GO
ALTER TABLE [dbo].[ROUNDS]
    ADD CONSTRAINT [FK_rounds_player] FOREIGN KEY ([PlayerID]) REFERENCES [dbo].[PLAYER] ([playerID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trans_action]...';


GO
ALTER TABLE [dbo].[TRANSACTIONS]
    ADD CONSTRAINT [FK_trans_action] FOREIGN KEY ([ActionID]) REFERENCES [dbo].[ACTIONS] ([ActionID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trans_player]...';


GO
ALTER TABLE [dbo].[TRANSACTIONS]
    ADD CONSTRAINT [FK_trans_player] FOREIGN KEY ([PlayerID]) REFERENCES [dbo].[PLAYER] ([playerID]);


GO
PRINT N'Creating Procedure [dbo].[Game_slot_machine]...';


GO
create proc Game_slot_machine 
 as
 begin
	declare @reel1 VARCHAR(10) 
	declare @reel2 VARCHAR(10)
	declare @reel3 VARCHAR(10)
	declare @playerid int
	declare @bet int
	declare @r int 
	declare @p int
	declare @win int

	set @reel1 = (select top 1 reel1 from slotcombo ORDER BY NEWID())
	set @reel2 = (select top 1 reel2 from slotcombo ORDER BY NEWID())
	set @reel3 = (select top 1 reel3 from slotcombo ORDER BY NEWID())
	set @playerid = (Select top 1 playerid from player  ORDER BY NEWID())
	set @bet = (Select floor(rand()*1000))
	select @reel1, @reel2, @reel3 

	begin
		if @reel1=@reel2 and @reel2=@reel3
		begin
		set @bet = @bet
		set @win = @bet
		
		insert into rounds (gameid,playerid,[date],BET,win)
		values(1,@playerid, getdate(),@bet,@win)
		end
		else
		begin 
			set @bet = @bet
			set @win = 0

			insert into rounds (gameid,playerid,[date],BET,win)
			values(1,@playerid, getdate(),@bet,@win)
	end
	end
	end
	EXECUTE Game_slot_machine 
	select * from rounds
GO
PRINT N'Creating Procedure [dbo].[Horse_Race]...';


GO
create proc Horse_Race (@playerId int,@betid int) 
as
begin

	Declare @date datetime = getdate()--(select top 1 date from dim_date ORDER BY NEWID())
	Declare @gameid  int = 2
	declare @typeid int = (select actionid from Actions where actionid = 3)
	Declare @amount money = (select bet from wallet where bet = @betid)
	declare @winlose int = 0
	declare @Balanc money = (SELECT SUM(balance) FROM wallet WHERE PlayerID = @playerid)

	DECLARE @Counter INT
	declare @bet int = (select top 1 Number from symbols where number <4 ORDER BY NEWID())
	DECLARE @Horse1 VARCHAR(100) = '1...........'
	DECLARE @Horse2 VARCHAR(100) = '2...........'
	DECLARE @Horse3 VARCHAR(100) = '3...........'
	DECLARE @Horse4 VARCHAR(100) = '4...........'
	DECLARE @Horse5 VARCHAR(100) = '5...........'

	DECLARE @a INT = 0
	DECLARE @b INT = 0
	DECLARE @c INT = 0
	DECLARE @d INT = 0
	DECLARE @e INT = 0

	declare @xa int
	declare @xb int
	declare @xc int
	declare @xd int
	declare @xe int
 begin

	 SET @Counter = 1
	 if @balanc<(select bet from wallet where Bet = @betid)
	 begin
	 select 'not enough funds'
	 return
	 end

	 begin
	 if not exists (select 1 from player where PlayerID = @playerid)
	 begin
	 SELECT 'USER IS NOT REGISTERED'
	 RETURN
	 end

	if  (SELECT isblock FROM player where PlayerID = @playerid) =1
	begin
	SELECT 'USER IS BLOCKED'
	RETURN
	end
	end

		WHILE ( @Counter <= 10)	
		BEGIN
			set @xa =(select top 1 Number from symbols where number <4 ORDER BY NEWID())
			set @xb =(select top 1 Number from symbols where number <4 ORDER BY NEWID())
			set @xc =(select top 1 Number from symbols where number <4 ORDER BY NEWID())
			set @xd =(select top 1 Number from symbols where number <4 ORDER BY NEWID())
			set @xe =(select top 1 Number from symbols where number <4 ORDER BY NEWID())
			print RIGHT(@Horse1, @a)  + LEFT(@Horse1, LEN(@Horse1) -@a)
			print RIGHT(@Horse2, @b)  + LEFT(@Horse2, LEN(@Horse2) -@b)
			print RIGHT(@Horse3, @c)  + LEFT(@Horse3, LEN(@Horse3) -@C)
			print RIGHT(@Horse4, @d)  + LEFT(@Horse4, LEN(@Horse4) -@d)
			print RIGHT(@Horse5, @e)  + LEFT(@Horse5, LEN(@Horse5) -@E)
			print '____________________________________________________________________________'

			set @a = @a+@xa
			set @b = @b+@xb
			set @c = @c+@xc
			set @d = @d+@xd
			set @e = @e+@xe

			  IF @a >=9 or @b>=9 or @c >=9 or @d>=9 or @e>=9
			  BEGIN
			  print @a  print @b  print @c  print @d  print @e 
			  BREAK
			  end
	  			SET @Counter  = @Counter  + 1
		end

begin
	 
	  if (@a >@b and @a>@c and @a>@d and @a>@e )
		 begin
		     print 'Horse 1 Is the winner!!!!' +' Round: '+CONVERT(VARCHAR,@counter)+ ' '+'Yore Bet:' + CONVERT(VARCHAR,@bet)
			   if  @bet = 1
			    begin
				set @winlose = 1
					insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,@amount,@typeid)
			    end
			   else 
			    begin
					insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,(-1*@amount),@typeid)
		        end
	      end
	  else if (@b>@a and @b>@c and @b>@d and @b>@e )
		 begin
		     print 'Horse 2 is the winner!!!!'+' Round: '+CONVERT(VARCHAR,@counter)+' '+ 'Yore Bet:' + CONVERT(VARCHAR,@bet)
			   if  @bet = 2
			    begin
				set @winlose = 1
					insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,@amount,@typeid)
			    end

			   else
							insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,(-1*@amount),@typeid)
	     end

	  else if (@c >@a and @c>@b and @c>@d and @c>@e)
		begin
		    print 'Horse 3 is the winner!!!!'+' Round: '+CONVERT(VARCHAR,@counter)+' '+ 'Yore Bet:' + CONVERT(VARCHAR,@bet)
		      if  @bet = 3
			   begin
			   set @winlose = 1
							insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,@amount,@typeid)
			   end

			  else
									insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,(-1*@amount),@typeid)
		end
	  else if (@d >@a and @d>@b and @d>@c and @d>@e)
		begin
		    print 'Horse 4 is the winner!!!!'+' Round: '+CONVERT(VARCHAR,@counter)+' '+ 'Yore Bet:' + CONVERT(VARCHAR,@bet)
			if  @bet = 4
			 begin
			 set @winlose = 1
						insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,@amount,@typeid)
			 end

			else 
										insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,(-1*@amount),@typeid)
		    end
	  else if (@e >@a and @e>@b and @e>@c and @e>@d )
		 begin
		   print 'Horse 5 is the winner!!!!'+' Round: '+CONVERT(VARCHAR,@counter)+' '+ 'Yore Bet:' + CONVERT(VARCHAR,@bet)
		     if  @bet = 5
		      begin
			  set @winlose = 1
						insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,@amount,@typeid)
		      end

		    else
			begin
					insert into Rounds (GameID,PlayerID,Date,Bet,win)
					values( @gameid, @playerid,@date,@betid,@winlose)

					insert into transactions(playerid,date,amount,actionid)
					values(@playerid,@date,(-1*@amount),@typeid)
					end
		 end	
	
	end
end
end
GO
PRINT N'Creating Procedure [dbo].[sp_login]...';


GO
create procedure sp_login 
(@username varchar(10) , @password varchar(10))
as begin
	if exists  ( select  1 from players
			where username = @username
			and @password = password and isblocked = 0)
	begin 
		update players 
		set NUmFailed  =0 
		return 1 
	end
	
	else 
	begin 
		if exists  ( select  1 from players
			where username = @username)
		update player 
		set NUmFailed  += 1 
	where username = @username

		if (( select  NUmFailed from player
			where username = @username)=  5)
		update player 	
			set isblock = 1
			where username = @username


	return 0

	end 
 end
GO
PRINT N'Creating Procedure [dbo].[sp_registration]...';


GO

 create proc sp_registration (
@username varchar(100), 
@password varchar(50),
@FirstName varchar(50),
@Lastname varchar(50),
@Countryid   int ,
@Email    varchar(50),
@Genderid    int,
@BirthDate date )
as
begin
declare @i int = 0
while (1 = 1)
 begin
	 if exists ( select 1 from player
		where username = @username ) 
		begin  	
		declare @r int 
		set @r = rand() *100

		while ( 1 =1 ) 
		begin 
			set @r = rand() *100


			if not exists ( select  1 from player
				where username =  concat (@username , @r ) )
				begin
				select  'USERNAME Already EXISTS' +' - '+'Alternative user:  ' +concat (@username , @r ) 
				return 
		end
		BREAK
		end
		end

	 If  CHARINDEX('Password',@password) > 0 or @password = @Username or CHARINDEX('Pass',@password) > 0 or CHARINDEX('Word',@password) > 0
		or @password in(select [password] from weakpasses ) or @password not LIKE '%[0-9]%'
		
		begin	
		select 'Weak password'
		BREAK
		end
	

	 if @email NOT LIKE '%_@__%.__%' or @email in (select Email from player)
		 begin
		 select 'Invalid Email'
		 BREAK
		 end

		
	
	 if DATEDIFF(YEAR, @BirthDate,GETDATE())<18

		 begin
		 SELECT 'NOT OLD ENOUGH'
		 BREAK
		 end
	else 
			insert player(username, password, firstname, lastname, countryid, email,GenderID, BirthDate)

			values(@username , @password, @firstname, @lastname, @Countryid, @email, @Genderid, @BirthDate)

			SELECT 'GOOD LUCK'
			end 
		

		end
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
